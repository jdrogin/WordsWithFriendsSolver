@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .hand {
        font-family:'Courier New';
        font-size:large;
    }
    .remaining {
        font-family:'Courier New';
        font-weight:bold;
    }
    .noneremaining {
        color: lightgray;
        font-weight:normal;
    }
    .cell {
        width:22px;
        height:22px;
        float:left;
        border:1px solid black;
        text-align:center;
        font-family:'Courier New'
    }
    .letter {
        background-color: lemonchiffon;
    }
    .transient {
        color: black;
        font-weight: bold;
        background-color: lightsalmon;
    }
</style>

<script type="text/javascript">
    function toggleLettersRemaining(buttonObj, divId) {
        if (document.getElementById(divId).style.display != 'block')
        {
            buttonObj.innerText = "Hide";
            document.getElementById(divId).style.display = 'block';
        }
        else
        {
            buttonObj.innerText = "Show";
            document.getElementById(divId).style.display = 'none';
        }
    }
</script>

<h4>Solve Count: @ViewBag.solvedBoards.Count.ToString("#,###")</h4>
<h4>Solve Time: @ViewBag.solveTime.TotalSeconds.ToString("0.000") seconds</h4>
<h4>Iterations: @ViewBag.iterations.ToString("#,###")</h4>
<br />

<div class="hand">
    Hand:
    @foreach (WordsLib.LetterInfo letter in @ViewBag.hand)
    {
        <span>@letter.Letter<sup>@letter.PointValue</sup></span>
    }
</div>
<br />

<div class="remaining">
    <div style="clear:both"></div>
    Remaining Letters: <button onclick="toggleLettersRemaining(this, 'remainingLettersDiv')">Show</button>
    <div id="remainingLettersDiv" style="display:none">
        @foreach (char letter in @ViewBag.remainingLetters.Keys)
        {
            int count = @ViewBag.remainingLetters[letter];
            <div @if (count == 0) { <text> class="noneremaining" </text> }>@letter - @count</div>
        }
    </div>
</div>
<br />

@for (int solvedBoardIndex = 0; solvedBoardIndex < @ViewBag.solvedBoards.Count && solvedBoardIndex < 75; solvedBoardIndex++)
{
    WordsLib.Board solvedBoard = @ViewBag.solvedBoards[solvedBoardIndex];
    <div>board: @(solvedBoardIndex + 1), score: @solvedBoard.TransientScore.TotalScore @if (solvedBoard.TransientScore.IncludesBonus) { <text>+</text>}</div>

    for (int y = 0; y < 15; y++)
    {
        <div style="clear:both;width:460px">
        @for (int x = 0; x < 15; x++)
        {
            WordsLib.BoardCell cell = solvedBoard.GetCell(x, y);
            char val = cell.HasLetter ? cell.Letter : ' ';
            string classes = "cell";
            if (cell.HasLetter)
            {
                classes += " letter";
            }
            if (cell.IsTransient)
            {
                classes += " transient";
            }

            <div class="@classes">@val</div>
        }
        </div>
    }

    <div style="clear:both"></div>
    <br />
    <br />
}